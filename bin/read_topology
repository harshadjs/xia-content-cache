#!/usr/bin/python
#
# Copyright 2013 Carnegie Mellon University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import re

DEFAULT_PORT=1500

def help():
	print '\nusage: make_sockconf click_conf_file dest_sockconf dest_nodeconf'
	print 'creates xsockconf.ini and xnodeconf in the current directory based on the'
	print 'specified template file\n'
	sys.exit(-1)

def create_output_file(name):
	try:
		f = open(name, 'w')
	except:
		print 'unable to open %s for writing' % name

	return f


# start here

if len(sys.argv) != 4:
	help()

nshost = None

# slurp in the config file stripping comments and whitespace
lines = ''
try:
	with open(sys.argv[1]) as conf_file:
		for line in conf_file:

			# see if there is a comment indicating nameserver host
			# comment must be on a line by itself
			# '// host :: nameserver'
			if line.find('nameserver') >= 0:
				i = line.find('//')
				if i >= 0:
					ns = line[i+2:]
					i = ns.find('::')
					if i >= 0:
						ns = ns[:i-1]
						nshost = ns.strip()
					continue

			# get rid of comments and whitespace
			line = line.partition('//')[0]
			line = line.strip()
			if len(line) == 0:
				continue
			lines += line
except:
	help()


sockconf = create_output_file(sys.argv[2])
sockconf.write('# Generated from %s\n\n' % os.path.basename(sys.argv[1]))
sockconf.write('[default]\nclick_port=%s\n\n' % DEFAULT_PORT)

nodeconf = create_output_file(sys.argv[3])

# look for elements of type XIAEndHost, XiaRouter[n]Port, and XIADualRouter[n]Port
test = re.compile('XIAEndHost|XIARouter\d+Port|XIADualRouter\d+Port')

lines = lines.split(';')
for line in lines:

	# find lines with an element definition
	element = re.search(test, line)
	if element == None:
		continue

	# which field is port defined in
	if element.group() == 'XIAEndHost':
		field = 2
	else:
		field = 4

	name, fields = line.split('::')
	fields = fields.split(',')
	name = name.strip()

	sockconf.write('[%s]\nclick_port=%s\n\n' % (name, fields[field].strip()))
	nodeconf.write("%s\t%s\n" % (name, element.group()))

if nshost != None:
	nodeconf.write("%s\t%s\n" % (nshost, 'nameserver'))

sockconf.close
nodeconf.close

